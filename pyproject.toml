[tool.black]
line-length = 79
target-version = ["py310"]

[tool.ruff]
target-version = "py310"

[tool.ruff.lint]
ignore = [
    "E501", # line-legth check
    "D203", # black managed: one-blank-line-before-class
    "D211", # black managed: no-blank-line-before-class
    "D212", # black managed: multi-line-summary-first-line
    "D213", # black managed: multi-line-summary-second-line
    "INP001", # pdm managed: is part of an implicit namespace package. Add an `__init__.py`
    "I001", # isort managed: Import block is un-sorted or un-formatted
    "D100", # imho: shouldn't be enforced: Missing docstring in public module
    "D103", # imho: docstrings in pub functions and classes shouldn't be enforced: Missing docstring in public function
    "D104", # imho: docstrings in pub packages and classes shouldn't be enforced: Missing docstring in public function
    "D101", # Missing docstring in public class
    "COM812", # black managed: Trailing comma missing
    "TRY003", # Avoid specifying long messages outside the exception class
    "EM102", # Exception must not use an f-string literal, assign to variable first
    "G004", # not a crime especially in loguru: Logging statement uses f-string
    "S101", # Use of `assert` detected
    "G010", # pcty_log use warn as access to Logging.warning: Logging statement uses `warn` instead of `warning`
    "ERA001", # do not remove anything detected to be commented out code, this was removing intended comments
    "N812", # Lowercase `types` imported as non-lowercase `T`
    "PGH003", # Use specific rule codes when ignoring type issues (too much)
    "D102", #  If code is fully typed there are a lot of cases when we don't need docstrings. Missing docstring in public method
    "D105", # Why we would need: Missing docstring in magic method
    "B008", # Do not perform function call `some_foo` in argument defaults (for NewType this is not valid)
    "PD901", # `df` is a bad variable name. Be kinder to your future self.
    "D407", # [*] Missing dashed underline after section
    "ANN", # disable all annotations related errors
    "RET503", # missing explicit return
    "RET504", # unnecessary assignment before return
    "TD", # we are not enforcing a style over the `todos and fixes`
    "FIX002", # Line contains TODOs, consider resolving the issue
    "FBT001", # Boolean-typed positional argument in function definition
    "FBT002", # FBT002 Boolean default positional argument in function definition
    "D", # TODO docstrings are not PEP257 compliant in the project. Decision should be made
	"PTH123", # `open()` should be replaced by `Path.open()`
	"DTZ011", # `datetime.date.today()` used
	"DTZ002", # `datetime.datetime.today()` used

]
select = [
    "ALL",
]
exclude = [
]

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = [
    "ANN001", # Missing type annotation for function argument is expected with some fixtures
    "ANN201", # Return type annotation for test functions is not required
    "PD901", # `df` is a bad variable name. Be kinder to your future self.
    "PT001",  #  Use `@pytest.fixture()` over `@pytest.fixture`
    "PT007", #  Wrong values type in `@pytest.mark.parametrize` expected `list` of `tuple`
    "PT019", # This is a mistake in ruff in case of pytest:parametrize:Fixture `_ext` without value is injected as parameter, use `@pytest.mark.usefixtures` instead
    "PT023", # Use `@pytest.mark.integration()` over `@pytest.mark.integration`
]


[tool.pytest.ini_options]
minversion = "7.2.0"
addopts = "-vv -s --tb=native -m 'not integration'"
testpaths = "tests/"


[tool.isort]
atomic = true
line_length = 79
lines_after_imports = 2
lines_between_types = 1
use_parentheses = true
balanced_wrapping = true
include_trailing_comma = true
multi_line_output = 3
profile = "black"
known_third_party = [
    "pytest",
]
known_first_party = [
]

[tool.coverage.run]
branch = false
source = [
    "./pcty_crab"
]
omit = [
]

[tool.coverage.paths]
source = ["./pcty_crab"]

[tool.coverage.report]
fail_under = 0
skip_covered = true
show_missing = true

[tool.coverage.html]
directory = "coverage_html"



[tool.mypy]
allow_redefinition = false
check_untyped_defs = true
ignore_errors = false
ignore_missing_imports = true
implicit_reexport = false
local_partial_types = true
no_implicit_optional = true
strict_equality = true
strict_optional = true
warn_no_return = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true
namespace_packages = true
explicit_package_bases = true

[[tool.mypy.overrides]]
module = [
    "conftest",
    "tests.*",
    "*.tests",
]

ignore_errors = true

[[tool.mypy.overrides]]
module = [
]

ignore_missing_imports = true

[project]
name = "pcty_crab"
dynamic = ["version"]
description = "Challenge: RAG Application with Bugs"
authors = [
    { name = "Paylocity Data Science Team", email = "pctydatascience@paylocity.com" },
]
dependencies = [
    "pandas==2.3.2",
    "python-dotenv==1.1.1",
    "scikit-learn==1.7.1"
]
requires-python = ">=3.9"
readme = "README.md"

[project.urls]
repository = "https://github.com/Paylocity/dst-pcty_crab"
git_url = "https://github.com/Paylocity/dst-pcty_crab.git"
changelog = "https://github.com/Paylocity/dst-pcty_crab/blob/main/CHANGELOG.md"

[project.optional-dependencies]

dev = [
    "black>=22.3.0",
    "build>=0.10.0",
    "bump2version==1.0.1",
    "gitchangelog==3.0.4",
    "isort==5.9.2",
    "pystache==0.6.0",
    "ruff>=0.9",
    "pre-commit>=2.21.0",
]
test = [
    "pytest-mock>=3.10.0",
    "pytest>=7.2.2",
    "coverage>=7.6.1",
]
all = [
	"pcty_crab[dev,test]"
]

[tool.setuptools.packages.find]
include = ["*"]
exclude = ["tests*"]

[build-system]
requires = [
	"setuptools",
	"wheel"
]
build-backend = "setuptools.build_meta"

[tool.setuptools.dynamic]
version = {file = ["pcty_crab/VERSION"]}
